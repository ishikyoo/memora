name: Build and Publish

on:
  push:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Enable Modrinth and GitHub release publishing (ignored, Gradle controls publishing)'
        required: false
        default: 'false'

jobs:
  build_and_publish:
    name: Build and Publish
    runs-on: ubuntu-latest

    env:
      JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF-8"
      GRADLE_USER_HOME: ${{ github.workspace }}/.gradle-cache
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        with:
          path: .gradle-cache/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-wrapper-

      - name: Extract Gradle version
        id: gradle_version
        run: |
          version=$(grep "distributionUrl" gradle/wrapper/gradle-wrapper.properties | sed -E 's/.*gradle-([0-9.]+)-bin\.zip/\1/')
          echo "gradle_version=$version" >> $GITHUB_OUTPUT

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: .gradle-cache/caches/modules-2/files-2.1
          key: ${{ runner.os }}-gradle-modules-${{ hashFiles('**/*.gradle*', '**/gradle.lockfile') }}
          restore-keys: ${{ runner.os }}-gradle-modules-

      - name: Cache Gradle Transforms
        uses: actions/cache@v3
        with:
          path: .gradle-cache/caches/${{ steps.gradle_version.outputs.gradle_version }}/transforms
          key: ${{ runner.os }}-gradle-transforms-${{ hashFiles('**/*.gradle*', '**/gradle.lockfile') }}
          restore-keys: ${{ runner.os }}-gradle-transforms-

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew build

      - name: Get metadata from Gradle
        id: meta
        run: |
          echo "version=$(./gradlew -q printVersion | tail -n 1)" >> $GITHUB_OUTPUT
          echo "formated_version=$(./gradlew -q printFormatedVersion | tail -n 1)" >> $GITHUB_OUTPUT
          echo "publish_channel=$(./gradlew -q printPublishChannel | tail -n 1)" >> $GITHUB_OUTPUT
          echo "publish_github=$(./gradlew -q printShouldPublishToGitHub | tail -n 1)" >> $GITHUB_OUTPUT
          echo "publish_modrinth=$(./gradlew -q printShouldPublishToModrinth | tail -n 1)" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        if: ${{ steps.meta.outputs.publish_github == 'true' }}
        id: tag_exists
        run: |
          if git rev-parse "refs/tags/${{ steps.meta.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag
        if: steps.tag_exists.outputs.exists == 'false' && steps.meta.outputs.publish_github == 'true'
        run: |
          git tag ${{ steps.meta.outputs.version }}

      - name: Generate Changelogs
        if: ${{ steps.meta.outputs.publish_github == 'true' }}
        run: ./gradlew generateChangelogs

      - name: Push Git tag
        if: steps.tag_exists.outputs.exists == 'false' && steps.meta.outputs.publish_github == 'true'
        run: |
          git push origin ${{ steps.meta.outputs.version }}

      - name: Commit updated CHANGELOG.md
        if: steps.tag_exists.outputs.exists == 'false' && steps.meta.outputs.publish_github == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add CHANGELOG.md
          git diff --cached --quiet || git commit -m "Update CHANGELOG.md [skip ci] [skip changelog]"
          git push

      - name: Create GitHub Release
        if: steps.tag_exists.outputs.exists == 'false' && steps.meta.outputs.publish_github == 'true'
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.meta.outputs.formated_version }}
          tag_name: ${{ steps.meta.outputs.version }}
          body_path: RELEASE_NOTES.md
          files: build/libs/*.jar
          prerelease: ${{ steps.meta.outputs.publish_channel != 'release' }}

      - name: Publish to Modrinth
        if: steps.tag_exists.outputs.exists == 'false' && steps.meta.outputs.publish_modrinth == 'true' && env.MODRINTH_TOKEN != ''
        run: ./gradlew modrinth